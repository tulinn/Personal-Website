<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects</title>
    <description>My personal website</description>
    <link>https://tulinakdogan.com/</link>
    <atom:link href="https://tulinakdogan.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 May 2017 23:38:03 -0400</pubDate>
    <lastBuildDate>Wed, 17 May 2017 23:38:03 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Live Operations in Mobile Gaming</title>
        <description>&lt;p&gt;Live Operations are the changes to the game after it goes live. Running live game operations require analyzing player behavior, setting weekly / daily events accordingly, modifying game parameters, rewarding players and communicating the events to players. Live operations help games grow by tailoring the app to the players’ need and making constant modifications so it feels live to them. Generally, live operations are being monitored on the admin side without changing the game code on the back-end. Most commonly known live operation is the event of limited time offer. Live operations should be directly actionable from the player’s side and tied to player behavior. Live operations usually aim to increase user engagement, monetization and marketing / cross promotion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/live-operations.jpg&quot; alt=&quot;File Structure screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Live operations are very powerful and when done effectively at the right times, it can increase retention and engagement. Special events and offers grab users’ attention, make them come back and thus launch the app more often (more sessions a day) which ultimately increase retention. Live operations also encourage users to spend more time in the app (greater session length) and enter more contests which ultimately increase engagement. Therefore, it is important to analyze user behavior by tracking their actions in order to target and segment users to provide them with more value. In Squad Up, contest scheduling is a daily live operation. Setting up contests for schedules needs to be done strategically so there are up and running contests any time of the day. In addition to strategic scheduling, setting up contests with different types and payout structures is also a way to operate live operations. Optimal live operations in Squad Up can lead to more contest entries. More contest entries increase the session length and amount and thus the more time spent on the app the more users are exposed to ads. Ads are the main source of monetization and thus live operations increase revenue.&lt;/p&gt;

</description>
        <pubDate>Sat, 13 May 2017 13:18:23 -0400</pubDate>
        <link>https://tulinakdogan.com/2017/05/13/Live-Operations-in-Mobile-Gaming.html</link>
        <guid isPermaLink="true">https://tulinakdogan.com/2017/05/13/Live-Operations-in-Mobile-Gaming.html</guid>
        
        
      </item>
    
      <item>
        <title>Having Good File Organization in an Electron App</title>
        <description>&lt;p&gt;File organization of a programming project is vital for good engineering principles such as abstraction. It is also a good software engineering practice as good file organization makes it easier to maintain and modify the code. The Electron application I built during my internship mainly consists of “node_modules” folder, “public” folder, “main.js” file and “package.json” file as shown in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/file-structure.jpg&quot; alt=&quot;File Structure screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The package.json file contains meta data about the application. It also includes the list of dependencies to install from npm when running npm install. In Electron, the process that runs package.json’s main script is called the main process. The script that runs in the main process can display a GUI by creating web pages. Application’s package.json file has dependency node modules in it. These modules are installed into the “node_modules” folder.&lt;/p&gt;

&lt;p&gt;The main.js file creates windows and handles system events. When Electron finishes initialization and the application is ready, main.js first creates a new browser window and then loads the index.html file into that window.&lt;/p&gt;

&lt;p&gt;The chronological order of the file calls:
package.json ──&amp;gt; main.js ──&amp;gt; public/pages/index.html&lt;/p&gt;

&lt;p&gt;The “public” folder is a bundle of frontend items. “css” folder holds the css files. “js” files holds the js files corresponding to each page in the pages folder. The files in the “js” folder have the same name as the files in the “pages” folder. An Electron application can use multiple pages. The only difference is that js files have “.js” extension whereas pages files have “.html” extension. For index.html file in the “pages” folder, there is a corresponding index.js file in the “js” folder. The “js-common” folder has js files used commonly by every page. The “js-resources” folder has the database connection related file.&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Sep 2016 13:18:23 -0400</pubDate>
        <link>https://tulinakdogan.com/2016/09/23/Electron-File-Organization.html</link>
        <guid isPermaLink="true">https://tulinakdogan.com/2016/09/23/Electron-File-Organization.html</guid>
        
        
      </item>
    
      <item>
        <title>Electron Desktop Apps</title>
        <description>&lt;p&gt;Electron is a framework to build cross platform desktop applications with web technologies like JavaScript, HTML, and CSS. One of the main reasons Electron is recommended as the framework to develop a desktop application, is because Electron uses the same technology web applications use. Thus, it will be faster to prototype, less costly to build and easy to convert the desktop application to a web application in the future if needed. Another reason is the easy maintenance; desktop applications are easy to maintain and often connect better than web applications. An Electron application runs the same regardless of the operating system.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 13:18:23 -0400</pubDate>
        <link>https://tulinakdogan.com/2016/09/04/Electron-Desktop-Apps.html</link>
        <guid isPermaLink="true">https://tulinakdogan.com/2016/09/04/Electron-Desktop-Apps.html</guid>
        
        
      </item>
    
  </channel>
</rss>
